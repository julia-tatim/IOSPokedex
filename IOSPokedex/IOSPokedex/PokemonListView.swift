import SwiftUIstruct PokemonListView: View {    @StateObject private var viewModel = PokemonListViewModel()    let userId: String    @State private var showContent = false    let columns = [        GridItem(.flexible()),        GridItem(.flexible())    ]    var body: some View {        NavigationView {            ZStack {                DesignTokens.Colors.background.ignoresSafeArea()                VStack(spacing: DesignTokens.Spacing.large) {                    NavigationLink(destination: FavoritosView(userId: userId)) {                        Text("Pokémons Favoritos ⭐️")                            .foregroundColor(DesignTokens.Colors.buttonText)                            .padding()                            .frame(maxWidth: .infinity)                            .background(DesignTokens.Colors.buttonBackground)                            .cornerRadius(DesignTokens.CornerRadius.large)                            .shadow(radius: 5)                    }                    .padding(.horizontal)                    ScrollView {                        LazyVGrid(columns: columns, spacing: DesignTokens.Spacing.medium) {                            ForEach(viewModel.pokemons.indices, id: \.self) { index in                                let pokemon = viewModel.pokemons[index]                                NavigationLink(destination: PokemonDetailView(pokemonEntry: pokemon, userId: userId)) {                                    PokemonCellView(pokemon: pokemon)                                        .onAppear {                                            // Paginação automática                                            if index == viewModel.pokemons.count - 1 {                                                viewModel.fetchPokemons()                                            }                                        }                                }                                .transition(.opacity.combined(with: .scale))                            }                        }                        .padding()                    }                }                .opacity(showContent ? 1 : 0)                .onAppear {                    withAnimation(.easeIn(duration: 1.0)) {                        showContent = true                    }                    viewModel.fetchPokemons()                }                .navigationTitle("Lista de Pokémons")                .foregroundColor(DesignTokens.Colors.text)            }        }    }}struct PokemonCellView: View {    let pokemon: PokemonEntry    @State private var imageUrl: String?    var body: some View {        VStack(spacing: DesignTokens.Spacing.small) {            AsyncImage(url: URL(string: imageUrl ?? "")) { phase in                switch phase {                case .empty:                    ProgressView()                case .success(let image):                    image.resizable()                        .scaledToFit()                        .frame(maxWidth: 120, maxHeight: 120)                case .failure(_):                    Image(systemName: "photo")                        .resizable()                        .scaledToFit()                        .frame(maxWidth: 100, maxHeight: 100)                        .foregroundColor(.gray)                @unknown default:                    EmptyView()                }            }            Text(pokemon.name.capitalized)                .font(DesignTokens.Fonts.body)                .foregroundColor(DesignTokens.Colors.text)        }        .padding()        .background(DesignTokens.Colors.cardBackground)        .cornerRadius(DesignTokens.CornerRadius.medium)        .overlay(            RoundedRectangle(cornerRadius: DesignTokens.CornerRadius.medium)                .stroke(DesignTokens.Colors.border, lineWidth: 2)        )        .shadow(radius: 3)        .onAppear {            loadImageUrl()        }    }    func loadImageUrl() {        Pokemon().getPokemonDetails(from: pokemon.url) { details in            imageUrl = details?.sprites.front_default        }    }}