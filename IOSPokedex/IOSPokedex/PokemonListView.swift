import SwiftUIstruct PokemonListView: View {    @StateObject private var viewModel = PokemonListViewModel()    let userId: String    @State private var showContent = false    @State private var searchText = ""    let columns = [        GridItem(.adaptive(minimum: 120), spacing: DesignTokens.Spacing.medium)  // ✅ Responsivo    ]    var body: some View {        NavigationView {            ZStack {                DesignTokens.Colors.background.ignoresSafeArea()                VStack(spacing: DesignTokens.Spacing.large) {                    // ✅ Botão para Favoritos                    NavigationLink(destination: FavoritosView(userId: userId)) {                        Text("Seus Pokemons Favoritos")                            .foregroundColor(DesignTokens.Colors.buttonText)                            .padding()                            .frame(maxWidth: .infinity)                            .background(DesignTokens.Colors.buttonBackground)                            .cornerRadius(DesignTokens.CornerRadius.large)                            .shadow(radius: 5)                    }                    .padding(.horizontal)                    // ✅ Lista de Pokémons                    ScrollView {                        LazyVGrid(columns: columns, spacing: DesignTokens.Spacing.medium) {                            ForEach(viewModel.filteredPokemons(searchText: searchText).indices, id: \.self) { index in                                let pokemon = viewModel.filteredPokemons(searchText: searchText)[index]                                NavigationLink(destination: PokemonDetailView(pokemonEntry: pokemon, userId: userId)) {                                    PokemonCellView(pokemon: pokemon)                                        .onAppear {                                            // Paginação automática                                            if index == viewModel.filteredPokemons(searchText: searchText).count - 1 {                                                viewModel.fetchPokemons()                                            }                                        }                                }                                .transition(.opacity.combined(with: .scale))                            }                        }                        .padding()                    }                }                .opacity(showContent ? 1 : 0)                .onAppear {                    withAnimation(.easeIn(duration: 1.0)) {                        showContent = true                    }                    viewModel.fetchPokemons()                }                .navigationTitle("Lista de Pokémons")                .searchable(text: $searchText, placement: .navigationBarDrawer(displayMode: .always), prompt: "Buscar Pokémon")  // ✅ Barra de Pesquisa                .foregroundColor(DesignTokens.Colors.text)            }        }    }}