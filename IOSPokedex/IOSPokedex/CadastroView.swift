import SwiftUIstruct CadastroView: View {    @StateObject private var viewModel = CadastroViewModel()    @Environment(\.presentationMode) var presentationMode    @State private var showContent = false    var body: some View {        GeometryReader { geometry in            ZStack {                DesignTokens.Colors.background.ignoresSafeArea()                ScrollView {                    VStack(spacing: DesignTokens.Spacing.medium) {                        Spacer().frame(height: geometry.size.height * 0.05)                        Text("Cadastro")                            .font(DesignTokens.Fonts.title)                            .foregroundColor(DesignTokens.Colors.text)                        Group {                            TextField("Nome de usu√°rio", text: $viewModel.nomeDeUsuario)                                .textFieldStyle(RoundedBorderTextFieldStyle())                            TextField("Email", text: $viewModel.email)                                .textFieldStyle(RoundedBorderTextFieldStyle())                            SecureField("Senha", text: $viewModel.senha)                                .textFieldStyle(RoundedBorderTextFieldStyle())                        }                        .padding()                        .background(DesignTokens.Colors.cardBackground)                        .cornerRadius(DesignTokens.CornerRadius.medium)                        .overlay(RoundedRectangle(cornerRadius: DesignTokens.CornerRadius.medium)                            .stroke(DesignTokens.Colors.border, lineWidth: 2))                        .frame(maxWidth: 400)                        if !viewModel.erroMensagem.isEmpty {                            Text(viewModel.erroMensagem)                                .foregroundColor(.red)                                .multilineTextAlignment(.center)                                .frame(maxWidth: 300)                        }                        Button("Cadastrar") {                            viewModel.cadastrar()                        }                        .foregroundColor(DesignTokens.Colors.buttonText)                        .padding()                        .frame(maxWidth: 400)                        .background(DesignTokens.Colors.buttonBackground)                        .cornerRadius(DesignTokens.CornerRadius.medium)                        Spacer()                    }                    .frame(maxWidth: .infinity)                    .padding()                    .opacity(showContent ? 1 : 0)                    .onAppear {                        withAnimation(.easeIn(duration: 1.0)) {                            showContent = true                        }                    }                    .onChange(of: viewModel.cadastroSucesso) { sucesso in                        if sucesso {                            presentationMode.wrappedValue.dismiss()                        }                    }                }                .frame(width: geometry.size.width, height: geometry.size.height)            }        }    }}