import SwiftUIstruct LoginView: View {    @StateObject private var viewModel = LoginViewModel()    @State private var mostrarCadastro = false    @State private var estaLogado = false    @State private var showContent = false    var body: some View {        NavigationView {            ZStack {                DesignTokens.Colors.background.ignoresSafeArea()                VStack(spacing: DesignTokens.Spacing.medium) {                    Text("Souls Pokedex")                        .font(DesignTokens.Fonts.title)                        .foregroundColor(DesignTokens.Colors.text)                    Group {                        TextField("Email", text: $viewModel.email)                        SecureField("Senha", text: $viewModel.senha)                    }                    .padding()                    .background(DesignTokens.Colors.cardBackground)                    .cornerRadius(DesignTokens.CornerRadius.medium)                    .overlay(RoundedRectangle(cornerRadius: DesignTokens.CornerRadius.medium)                        .stroke(DesignTokens.Colors.border, lineWidth: 2))                    if !viewModel.erroMensagem.isEmpty {                        Text(viewModel.erroMensagem)                            .foregroundColor(.red)                            .multilineTextAlignment(.center)                    }                    Button("Entrar") {                        viewModel.login()                    }                    .foregroundColor(DesignTokens.Colors.buttonText)                    .padding()                    .frame(maxWidth: .infinity)                    .background(DesignTokens.Colors.buttonBackground)                    .cornerRadius(DesignTokens.CornerRadius.medium)                    Button("Crie sua nova conta!") {                        mostrarCadastro = true                    }                    .foregroundColor(DesignTokens.Colors.text)                    NavigationLink(                        destination: PokemonListView(userId: viewModel.userId),                        isActive: $estaLogado                    ) {                        EmptyView()                    }                }                .padding()                .opacity(showContent ? 1 : 0)                .onAppear {                    withAnimation(.easeIn(duration: 1.0)) {                        showContent = true                    }                }                .sheet(isPresented: $mostrarCadastro) {                    CadastroView()                }                .onChange(of: viewModel.loginSucesso) { sucesso in                    if sucesso {                        estaLogado = true                    }                }            }        }    }}