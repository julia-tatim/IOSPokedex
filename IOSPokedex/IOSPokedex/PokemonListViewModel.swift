import SwiftUIclass PokemonListViewModel: ObservableObject {    @Published var pokemons: [PokemonEntry] = []    private let api = Pokemon()    private var offset = 0    private let limit = 20    private var isLoading = false    func fetchPokemons() {        guard !isLoading else { return }        isLoading = true        api.getData(offset: offset, limit: limit) { [weak self] results in            DispatchQueue.main.async {                self?.pokemons.append(contentsOf: results)                self?.offset += self?.limit ?? 20                self?.isLoading = false            }        }    }    func filteredPokemons(searchText: String) -> [PokemonEntry] {        if searchText.isEmpty {            return pokemons        } else {            return pokemons.filter { $0.name.lowercased().contains(searchText.lowercased()) }        }    }}struct PokemonCellView: View {    let pokemon: PokemonEntry    @State private var imageUrl: String?    var body: some View {        VStack(spacing: DesignTokens.Spacing.small) {            AsyncImage(url: URL(string: imageUrl ?? "")) { phase in                switch phase {                case .empty:                    ProgressView()                case .success(let image):                    image.resizable()                        .scaledToFit()                        .frame(maxWidth: 120, maxHeight: 120)                case .failure(_):                    Image(systemName: "photo")                        .resizable()                        .scaledToFit()                        .frame(maxWidth: 100, maxHeight: 100)                        .foregroundColor(.gray)                @unknown default:                    EmptyView()                }            }            Text(pokemon.name.capitalized)                .font(DesignTokens.Fonts.body)                .foregroundColor(DesignTokens.Colors.text)        }        .padding()        .background(DesignTokens.Colors.cardBackground)        .cornerRadius(DesignTokens.CornerRadius.medium)        .overlay(            RoundedRectangle(cornerRadius: DesignTokens.CornerRadius.medium)                .stroke(DesignTokens.Colors.border, lineWidth: 2)        )        .shadow(radius: 3)        .onAppear {            loadImageUrl()        }    }    func loadImageUrl() {        Pokemon().getPokemonDetails(from: pokemon.url) { details in            imageUrl = details?.sprites.front_default        }    }}