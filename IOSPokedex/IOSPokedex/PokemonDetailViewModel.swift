import Foundationimport CoreDataclass PokemonDetailViewModel: ObservableObject {    @Published var isFavorito = false    private let context = PersistenceController.shared.container.viewContext    private let pokemonId: String    private let userId: String    init(pokemonId: String, userId: String) {        self.pokemonId = pokemonId        self.userId = userId    }    func checarFavorito() {        let request = NSFetchRequest<Favorito>(entityName: "Favorito")        request.predicate = NSPredicate(format: "uid == %@ AND userId == %@", pokemonId, userId)        do {            let resultados = try context.fetch(request)            isFavorito = !resultados.isEmpty        } catch {            print("Erro ao buscar favorito: \(error)")            isFavorito = false        }    }    func toggleFavorito(nome: String, imagemUrl: String) {        if isFavorito {            removerFavorito()        } else {            adicionarFavorito(nome: nome, imagemUrl: imagemUrl)        }    }    private func adicionarFavorito(nome: String, imagemUrl: String) {        let favorito = Favorito(context: context)        favorito.uid = pokemonId        favorito.nomePokemon = nome        favorito.imagemUrl = imagemUrl        favorito.userId = userId        salvarContexto()        isFavorito = true    }    private func removerFavorito() {        let request = NSFetchRequest<Favorito>(entityName: "Favorito")        request.predicate = NSPredicate(format: "uid == %@ AND userId == %@", pokemonId, userId)        do {            let resultados = try context.fetch(request)            for favorito in resultados {                context.delete(favorito)            }            salvarContexto()            isFavorito = false        } catch {            print("Erro ao remover favorito: \(error)")        }    }    private func salvarContexto() {        do {            try context.save()        } catch {            print("Erro ao salvar contexto: \(error)")        }    }}